#!/usr/bin/python

# import argparse

# parser = argparse.ArgumentParser(description='Process some integers.')
# parser.add_argument('integers', metavar='N', type=int, nargs='+',
#                    help='an integer for the accumulator')
# parser.add_argument('--sum', dest='accumulate', action='store_const',
#                    const=sum, default=max,
#                    help='sum the integers (default: find the max)')

# args = parser.parse_args()
# print args.accumulate(args.integers)

import os
import subprocess
import sys

commands = {
    "run": "stratus-run-instance",
    "list": "stratus-describe-instance",
    "connect": "stratus-connect-instance",
    "shutdown": "stratus-shutdown-instance",
    "kill": "stratus-kill-instance",
    }

def usage():
    print "usage: stratus [shell|{}]".format('|'.join(sorted(commands.keys())))
    sys.exit(1)

VIRTUAL_ENV=os.environ["HOME"]+"/env/SL"
os.environ['VIRTUAL_ENV'] = VIRTUAL_ENV
os.environ['PATH'] = VIRTUAL_ENV + "/bin:" + os.environ['PATH']
if 'PYTHONHOME' in os.environ:
    del os.environ['PYTHONHOME']

if len(sys.argv) <= 1:
    usage()

command = sys.argv[1]
args = sys.argv[2:]

name_to_id = None

def id(name):
    global name_to_id
    if name_to_id is None:
        output = subprocess.check_output("stratus-describe-instance")
        name_to_id = {s.split()[-1]: s.split()[0]
                      for s in output.split('\n')
                      if s and s[:3] != "id "}
    return name_to_id.get(name, name)

if command in {"connect", "kill", "shutdown"}:
    args[0] = id(args[0])

if command in commands:
    subprocess.call([commands[command]]+args)
elif command == "shell":
    os.system(os.environ['SHELL'])
else:
    usage()
